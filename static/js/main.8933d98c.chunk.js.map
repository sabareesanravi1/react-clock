{"version":3,"sources":["Timer.js","App.js","reportWebVitals.js","index.js"],"names":["TimeComponent","props","state","time","Date","toLocaleTimeString","checkedTime","toggleChecked","style","fontSize","backgroundColor","fontFamily","this","interval","setInterval","setState","clearInterval","Component","App","getTime","className","Timer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QA+BeA,E,kDAxBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,IAAIC,MAAQC,qBAAqBC,aAAY,EAAMC,cAAe,YAC1D,IAAnB,EAAKD,YAAoB,EAAKA,aAAY,EACxC,EAAKA,aAAc,IAJhB,E,qDAShB,OACI,8BACF,oBAAGE,MAAO,CAACC,SAAS,QAAQC,gBAAgB,UAAUC,WAAW,mBAAjE,UACMC,KAAKV,MAAMC,KADjB,W,0CAKiB,IAAD,OAClBS,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAAEZ,MAAO,IAAIC,MAAQC,yBAAyB,O,6CAG9FW,cAAcJ,KAAKC,c,GAvBKI,a,MCcbC,MAdf,WAGE,OAFQ,IAAId,MACFe,UAER,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,8BACE,cAACC,EAAD,WCCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8933d98c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\nclass TimeComponent extends Component {\r\n \r\n    \r\n  constructor(props){\r\n    super(props);\r\n    this.state = { time: (new Date()).toLocaleTimeString(),checkedTime:false,toggleChecked :() => {\r\n            if(this.checkedTime===true) this.checkedTime=false;\r\n            else this.checkedTime = true;\r\n          }};\r\n\r\n  }\r\n  render(){\r\n    return(\r\n        <div>\r\n      <p style={{fontSize:'100px',backgroundColor:'#fe4365',fontFamily:'Brush Script MT'}}> \r\n          { this.state.time } </p>   \r\n        </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.setState({ time: (new Date()).toLocaleTimeString() }), 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n}\r\n\r\nexport default TimeComponent;","import Timer from './Timer'\n\nimport './App.css';\n\nfunction App() {\n  var d = new Date();\n  var n = d.getTime();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <Timer/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}